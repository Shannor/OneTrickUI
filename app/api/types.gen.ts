// This file is auto-generated by @hey-api/openapi-ts

export type Profile = {
  id: string;
  membershipId: string;
  displayName: string;
  uniqueName: string;
  characters: Array<Character>;
};

export type CharacterSnapshot = {
  /**
   * Id of the character being recorded
   */
  characterId: string;
  /**
   * Timestamp that the items were equipped turning
   */
  timestamp: Date;
  /**
   * All items that we currently care about, Kinetic, Energy, Heavy and Class for now
   */
  items: Array<ItemSnapshot>;
};

export type ItemSnapshot = {
  /**
   * Time the data was grabbed
   */
  timestamp: Date;
  /**
   * Specific instance id for the item
   */
  instanceId: string;
  /**
   * Name of the particular item
   */
  name: string;
  /**
   * Id used to find the definition of the item
   */
  itemHash: number;
  details: ItemDetails;
};

export type ActivityHistory = {
  location: string;
  activity: string;
  description: string;
  referenceId: number;
  /**
   * Hash id of the type of activity: Strike, Competitive, QuickPlay, etc.
   */
  activityHash: number;
  /**
   * Id to get more details about the particular game
   */
  instanceId: string;
  isPrivate?: boolean;
  /**
   * Name of the Destiny Activity Mode
   */
  mode?: string;
};

export type Pong = {
  ping: string;
};

export type AuthResponse = {
  id: string;
  /**
   * Access token value.
   */
  accessToken: string;
  /**
   * Type of the access token.
   */
  tokenType: string;
  /**
   * The time duration in which the access token will be expired.
   */
  expiresIn: number;
  /**
   * Refresh token for acquiring new access token after it is expired.
   */
  refreshToken: string;
  /**
   * The time duration in which the refresh token will be expired.
   */
  refreshExpiresIn: number;
  /**
   * Membership identification value.
   */
  membershipId: string;
  /**
   * Membership that is mainly used
   */
  primaryMembershipId: string;
  timestamp: Date;
};

export type WeaponStats = {
  /**
   * The hash ID of the item definition that describes the weapon.
   */
  referenceId?: number;
  details?: ItemDetails;
  stats?: HistoricalStats;
};

export type HistoricalStats = Array<UniqueStatValue>;

export type UniqueStatValue = {
  name: string;
  /**
   * Basic stat value.
   */
  basic: StatsValuePair;
  /**
   * Per game average for the statistic, if applicable
   */
  pga?: StatsValuePair;
  /**
   * Weighted value of the stat if a weight greater than 1 has been assigned.
   */
  weighted?: StatsValuePair;
  /**
   * When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.
   */
  activityId?: number | null;
};

export type ActivityMode = 'competitive' | 'quickplay' | 'allPvP';

export type StatsValuePair = {
  /**
   * Raw value of the statistic
   */
  value?: number;
  /**
   * Localized formatted version of the value.
   */
  displayValue?: string;
};

export type Perk = {
  name: string;
  description?: string;
  /**
   * The hash ID of the perk
   */
  hash: number;
  /**
   * link to icon
   */
  iconPath?: string;
};

export type Stats = {
  [key: string]: GunStat;
};

export type GunStat = {
  /**
   * The hash ID of the stat.
   */
  hash: number;
  /**
   * The value of the stat.
   */
  value: number;
  name: string;
  description: string;
};

export type Socket = {
  /**
   * The hash ID of the socket plug.
   */
  plugHash: number;
  /**
   * Whether the socket plug is enabled or not.
   */
  isEnabled?: boolean;
  /**
   * Whether the socket plug is visible or not.
   */
  isVisible?: boolean;
  name: string;
  description: string;
  icon?: string;
};

export type BaseItemInfo = {
  name: string;
  itemHash: number;
  instanceId: string;
  bucketHash: number;
  damage?: DamageInfo;
};

export type DamageInfo = {
  damageType: string;
  damageIcon: string;
  transparentIcon: string;
  color: Color;
};

export type Color = {
  red: number;
  green: number;
  blue: number;
  alpha: number;
};

export type Character = {
  id: string;
  light: number;
  emblemURL: string;
  emblemBackgroundURL: string;
  currentTitle: string;
  race: string;
  class: string;
};

/**
 * The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
 */
export type ItemDetails = {
  /**
   * If the item is on a character, this will return the ID of the character that is holding the item.
   */
  characterId?: string | null;
  baseInfo: BaseItemInfo;
  /**
   * Information specifically about the perks currently active on the item. COMPONENT TYPE: ItemPerks
   */
  perks: Array<Perk>;
  /**
   * Information about the computed stats of the item: power, defense, etc... COMPONENT TYPE: ItemStats
   */
  stats: Stats;
  /**
   * Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them. COMPONENT TYPE: ItemSockets
   */
  sockets?: Array<Socket>;
};

export type XUserId = string;

export type XMembershipId = string;

export type GetPingData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/ping';
};

export type GetPingResponses = {
  /**
   * ping response
   */
  200: Pong;
};

export type GetPingResponse = GetPingResponses[keyof GetPingResponses];

export type ProfileData = {
  body?: never;
  headers: {
    'X-User-ID': string;
    'X-Membership-ID': string;
  };
  path?: never;
  query?: never;
  url: '/profile';
};

export type ProfileResponses = {
  /**
   * Current user info
   */
  200: Profile;
};

export type ProfileResponse = ProfileResponses[keyof ProfileResponses];

export type LoginData = {
  body?: {
    code: string;
  };
  path?: never;
  query?: never;
  url: '/login';
};

export type LoginResponses = {
  /**
   * Logging in
   */
  200: AuthResponse;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type RefreshTokenData = {
  body?: {
    code: string;
  };
  path?: never;
  query?: never;
  url: '/refresh';
};

export type RefreshTokenResponses = {
  /**
   * Refreshing token
   */
  200: AuthResponse;
};

export type RefreshTokenResponse =
  RefreshTokenResponses[keyof RefreshTokenResponses];

export type GetSnapshotsData = {
  body?: never;
  headers: {
    'X-User-ID': string;
  };
  path?: never;
  query: {
    count: number;
    page: number;
    characterId: string;
  };
  url: '/snapshots';
};

export type GetSnapshotsResponses = {
  200: Array<CharacterSnapshot>;
};

export type GetSnapshotsResponse =
  GetSnapshotsResponses[keyof GetSnapshotsResponses];

export type CreateSnapshotData = {
  /**
   * Provide the character to take the snapshot of
   */
  body: {
    characterId: string;
  };
  headers: {
    'X-User-ID': string;
    'X-Membership-ID': string;
  };
  path?: never;
  query?: never;
  url: '/snapshots';
};

export type CreateSnapshotResponses = {
  /**
   * Return the created snapshot
   */
  201: CharacterSnapshot;
};

export type CreateSnapshotResponse =
  CreateSnapshotResponses[keyof CreateSnapshotResponses];

export type GetActivitiesData = {
  body?: never;
  headers: {
    'X-User-ID': string;
    'X-Membership-ID': string;
  };
  path?: never;
  query: {
    count: number;
    page: number;
    characterId: string;
    mode?: ActivityMode;
  };
  url: '/activities';
};

export type GetActivitiesResponses = {
  /**
   * List of Activities that have past
   */
  200: Array<ActivityHistory>;
};

export type GetActivitiesResponse =
  GetActivitiesResponses[keyof GetActivitiesResponses];

export type GetActivityData = {
  body?: never;
  headers: {
    'X-User-ID': string;
    'X-Membership-ID': string;
  };
  path: {
    /**
     * The unique identifier for the activity.
     */
    activityId: string;
  };
  query: {
    characterId: string;
  };
  url: '/activities/{activityId}';
};

export type GetActivityResponses = {
  /**
   * Array of used guns during an activity
   */
  200: {
    activity: ActivityHistory;
    stats: Array<WeaponStats>;
  };
};

export type GetActivityResponse =
  GetActivityResponses[keyof GetActivityResponses];
