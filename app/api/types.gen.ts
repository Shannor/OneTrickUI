// This file is auto-generated by @hey-api/openapi-ts

export type ActivityHistory = {
  location: string;
  activity: string;
  description: string;
  referenceId: number;
  /**
   * Hash id of the type of activity: Strike, Competitive, QuickPlay, etc.
   */
  activityHash: number;
  /**
   * Id to get more details about the particular game
   */
  instanceId: string;
  isPrivate?: boolean;
  /**
   * Name of the Destiny Activity Mode
   */
  mode?: string;
};

export type BaseItemInfo = {
  name: string;
  itemHash: number;
  instanceId: string;
  bucketHash: number;
};

export type CharacterSnapshot = {
  /**
   * Timestamp that the items were equipped turning
   */
  timestamp: Date;
  /**
   * All items that we currently care about, Kinetic, Energy, Heavy and Class for now
   */
  items: Array<ItemSnapshot>;
};

export type GunStat = {
  /**
   * The hash ID of the stat.
   */
  hash: number;
  /**
   * The value of the stat.
   */
  value: number;
  name: string;
  description: string;
};

export type HistoricalStats = Array<UniqueStatValue>;

/**
 * The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
 */
export type ItemDetails = {
  /**
   * If the item is on a character, this will return the ID of the character that is holding the item.
   */
  characterId?: string | null;
  baseInfo: BaseItemInfo;
  /**
   * Information specifically about the perks currently active on the item. COMPONENT TYPE: ItemPerks
   */
  perks: Array<Perk>;
  /**
   * Information about the computed stats of the item: power, defense, etc... COMPONENT TYPE: ItemStats
   */
  stats: Stats;
  /**
   * Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them. COMPONENT TYPE: ItemSockets
   */
  sockets?: Array<Socket>;
};

export type ItemSnapshot = {
  /**
   * Time the data was grabbed
   */
  timestamp: Date;
  /**
   * Specific instance id for the item
   */
  instanceId: string;
  /**
   * Name of the particular item
   */
  name: string;
  /**
   * Id used to find the definition of the item
   */
  itemHash: number;
  details: ItemDetails;
};

export type Perk = {
  name: string;
  description?: string;
  /**
   * The hash ID of the perk
   */
  hash: number;
  /**
   * link to icon
   */
  iconPath?: string;
};

export type Pong = {
  ping: string;
};

export type Socket = {
  /**
   * The hash ID of the socket plug.
   */
  plugHash: number;
  /**
   * Whether the socket plug is enabled or not.
   */
  isEnabled?: boolean;
  /**
   * Whether the socket plug is visible or not.
   */
  isVisible?: boolean;
  name: string;
  description: string;
  icon?: string;
};

export type Stats = {
  [key: string]: GunStat;
};

export type StatsValuePair = {
  /**
   * Raw value of the statistic
   */
  value?: number;
  /**
   * Localized formatted version of the value.
   */
  displayValue?: string;
};

export type UniqueStatValue = {
  name: string;
  /**
   * Basic stat value.
   */
  basic: StatsValuePair;
  /**
   * Per game average for the statistic, if applicable
   */
  pga?: StatsValuePair;
  /**
   * Weighted value of the stat if a weight greater than 1 has been assigned.
   */
  weighted?: StatsValuePair;
  /**
   * When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.
   */
  activityId?: number | null;
};

export type WeaponStats = {
  /**
   * The hash ID of the item definition that describes the weapon.
   */
  referenceId?: number;
  details?: ItemDetails;
  stats?: HistoricalStats;
};

export type GetPingResponse = Pong;

export type GetPingError = unknown;

export type CreateSnapshotResponse = CharacterSnapshot;

export type CreateSnapshotError = unknown;

export type GetSnapshotsData = {
  query: {
    count: number;
    page: number;
  };
};

export type GetSnapshotsResponse = Array<CharacterSnapshot>;

export type GetSnapshotsError = unknown;

export type GetActivitiesData = {
  query: {
    count: number;
    page: number;
  };
};

export type GetActivitiesResponse = Array<ActivityHistory>;

export type GetActivitiesError = unknown;

export type GetActivityData = {
  path: {
    /**
     * The unique identifier for the activity.
     */
    activityId: string;
  };
};

export type GetActivityResponse = {
  activity: ActivityHistory;
  stats: Array<WeaponStats>;
};

export type GetActivityError = unknown;

export type CreateSnapshotResponseTransformer = (
  data: any,
) => Promise<CreateSnapshotResponse>;

export type CharacterSnapshotModelResponseTransformer = (
  data: any,
) => CharacterSnapshot;

export type ItemSnapshotModelResponseTransformer = (data: any) => ItemSnapshot;

export const ItemSnapshotModelResponseTransformer: ItemSnapshotModelResponseTransformer =
  (data) => {
    if (data?.timestamp) {
      data.timestamp = new Date(data.timestamp);
    }
    return data;
  };

export const CharacterSnapshotModelResponseTransformer: CharacterSnapshotModelResponseTransformer =
  (data) => {
    if (data?.timestamp) {
      data.timestamp = new Date(data.timestamp);
    }
    if (Array.isArray(data?.items)) {
      data.items.forEach(ItemSnapshotModelResponseTransformer);
    }
    return data;
  };

export const CreateSnapshotResponseTransformer: CreateSnapshotResponseTransformer =
  async (data) => {
    CharacterSnapshotModelResponseTransformer(data);
    return data;
  };

export type GetSnapshotsResponseTransformer = (
  data: any,
) => Promise<GetSnapshotsResponse>;

export const GetSnapshotsResponseTransformer: GetSnapshotsResponseTransformer =
  async (data) => {
    if (Array.isArray(data)) {
      data.forEach(CharacterSnapshotModelResponseTransformer);
    }
    return data;
  };
