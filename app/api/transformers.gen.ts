// This file is auto-generated by @hey-api/openapi-ts
import type {
  CreateSnapshotResponse,
  GetActivitiesResponse,
  GetActivityResponse,
  GetSnapshotResponse,
  GetSnapshotsResponse,
  LoginResponse,
  RefreshTokenResponse,
} from './types.gen';

const authResponseSchemaResponseTransformer = (data: any) => {
  data.timestamp = new Date(data.timestamp);
  return data;
};

export const loginResponseTransformer = async (
  data: any,
): Promise<LoginResponse> => {
  data = authResponseSchemaResponseTransformer(data);
  return data;
};

export const refreshTokenResponseTransformer = async (
  data: any,
): Promise<RefreshTokenResponse> => {
  data = authResponseSchemaResponseTransformer(data);
  return data;
};

const characterSnapshotSchemaResponseTransformer = (data: any) => {
  data.timestamp = new Date(data.timestamp);
  return data;
};

export const getSnapshotsResponseTransformer = async (
  data: any,
): Promise<GetSnapshotsResponse> => {
  data = data.map((item: any) => {
    return characterSnapshotSchemaResponseTransformer(item);
  });
  return data;
};

export const createSnapshotResponseTransformer = async (
  data: any,
): Promise<CreateSnapshotResponse> => {
  data = characterSnapshotSchemaResponseTransformer(data);
  return data;
};

export const getSnapshotResponseTransformer = async (
  data: any,
): Promise<GetSnapshotResponse> => {
  data = characterSnapshotSchemaResponseTransformer(data);
  return data;
};

const aggregateSchemaResponseTransformer = (data: any) => {
  data.createdAt = new Date(data.createdAt);
  return data;
};

const detailActivitySchemaResponseTransformer = (data: any) => {
  if (data.aggregate) {
    data.aggregate = aggregateSchemaResponseTransformer(data.aggregate);
  }
  return data;
};

export const getActivitiesResponseTransformer = async (
  data: any,
): Promise<GetActivitiesResponse> => {
  data = data.map((item: any) => {
    return detailActivitySchemaResponseTransformer(item);
  });
  return data;
};

export const getActivityResponseTransformer = async (
  data: any,
): Promise<GetActivityResponse> => {
  data.aggregate = aggregateSchemaResponseTransformer(data.aggregate);
  return data;
};
