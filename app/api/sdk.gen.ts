// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type OptionsLegacyParser,
} from '@hey-api/client-fetch';
import {
  type GetPingError,
  type GetPingResponse,
  type CreateSnapshotError,
  type CreateSnapshotResponse,
  type GetSnapshotsData,
  type GetSnapshotsError,
  type GetSnapshotsResponse,
  type GetActivitiesData,
  type GetActivitiesError,
  type GetActivitiesResponse,
  type GetActivityData,
  type GetActivityError,
  type GetActivityResponse,
  CreateSnapshotResponseTransformer,
  GetSnapshotsResponseTransformer,
} from './types.gen';

export const client = createClient(createConfig());

export const getPing = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPingResponse,
    GetPingError,
    ThrowOnError
  >({
    ...options,
    url: '/ping',
  });
};

/**
 * Creates a new snapshot in the system and returns a list of
 */
export const createSnapshot = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateSnapshotResponse,
    CreateSnapshotError,
    ThrowOnError
  >({
    ...options,
    url: '/snapshots',
    responseTransformer: CreateSnapshotResponseTransformer,
  });
};

/**
 * Returns a list of snapshots in the system
 */
export const getSnapshots = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetSnapshotsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSnapshotsResponse,
    GetSnapshotsError,
    ThrowOnError
  >({
    ...options,
    url: '/snapshots',
    responseTransformer: GetSnapshotsResponseTransformer,
  });
};

export const getActivities = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetActivitiesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetActivitiesResponse,
    GetActivitiesError,
    ThrowOnError
  >({
    ...options,
    url: '/activities',
  });
};

export const getActivity = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetActivityData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetActivityResponse,
    GetActivityError,
    ThrowOnError
  >({
    ...options,
    url: '/activities/{activityId}',
  });
};
