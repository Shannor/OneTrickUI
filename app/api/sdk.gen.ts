// This file is auto-generated by @hey-api/openapi-ts
import {
  type Options,
  createClient,
  createConfig,
} from '@hey-api/client-fetch';

import {
  createSnapshotResponseTransformer,
  getActivitiesResponseTransformer,
  getActivityResponseTransformer,
  getPublicSessionAggregatesResponseTransformer,
  getPublicSessionResponseTransformer,
  getPublicSessionsResponseTransformer,
  getSessionAggregatesResponseTransformer,
  getSessionResponseTransformer,
  getSessionsResponseTransformer,
  getSnapshotResponseTransformer,
  getSnapshotsResponseTransformer,
  loginResponseTransformer,
  refreshTokenResponseTransformer,
  startSessionResponseTransformer,
  updateSessionResponseTransformer,
} from './transformers.gen';
import type {
  CreateSnapshotData,
  CreateSnapshotResponse,
  GetActivitiesData,
  GetActivitiesResponse,
  GetActivityData,
  GetActivityResponse,
  GetFireteamData,
  GetFireteamError,
  GetFireteamResponse,
  GetPingData,
  GetPingResponse,
  GetPublicProfileData,
  GetPublicProfileError,
  GetPublicProfileResponse,
  GetPublicSessionAggregatesData,
  GetPublicSessionAggregatesResponse,
  GetPublicSessionData,
  GetPublicSessionResponse,
  GetPublicSessionsData,
  GetPublicSessionsResponse,
  GetSessionAggregatesData,
  GetSessionAggregatesResponse,
  GetSessionData,
  GetSessionResponse,
  GetSessionsData,
  GetSessionsResponse,
  GetSnapshotData,
  GetSnapshotResponse,
  GetSnapshotsData,
  GetSnapshotsResponse,
  LoginData,
  LoginResponse,
  ProfileData,
  ProfileError,
  ProfileResponse,
  RefreshTokenData,
  RefreshTokenResponse,
  SearchData,
  SearchResponse,
  SessionCheckInData,
  SessionCheckInResponse,
  StartSessionData,
  StartSessionError,
  StartSessionResponse,
  UpdateSessionData,
  UpdateSessionResponse,
} from './types.gen';

export const client = createClient(createConfig());

export const getPing = <ThrowOnError extends boolean = false>(
  options?: Options<GetPingData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPingResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    url: '/ping',
  });
};

/**
 * return a list from bungie of matching users
 */
export const search = <ThrowOnError extends boolean = false>(
  options?: Options<SearchData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    SearchResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/search',
  });
};

export const getFireteam = <ThrowOnError extends boolean = false>(
  options: Options<GetFireteamData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetFireteamResponse,
    GetFireteamError,
    ThrowOnError
  >({
    ...options,
    url: '/fireteam',
  });
};

export const profile = <ThrowOnError extends boolean = false>(
  options: Options<ProfileData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ProfileResponse,
    ProfileError,
    ThrowOnError
  >({
    ...options,
    url: '/profile',
  });
};

export const login = <ThrowOnError extends boolean = false>(
  options?: Options<LoginData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<LoginResponse, unknown, ThrowOnError>(
    {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
      responseTransformer: loginResponseTransformer,
      url: '/login',
    },
  );
};

export const refreshToken = <ThrowOnError extends boolean = false>(
  options?: Options<RefreshTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    RefreshTokenResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    responseTransformer: refreshTokenResponseTransformer,
    url: '/refresh',
  });
};

/**
 * Returns a list of snapshots in the system for a character
 */
export const getSnapshots = <ThrowOnError extends boolean = false>(
  options: Options<GetSnapshotsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSnapshotsResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    responseTransformer: getSnapshotsResponseTransformer,
    url: '/snapshots',
  });
};

/**
 * Creates a new snapshot in the system and returns a list of
 */
export const createSnapshot = <ThrowOnError extends boolean = false>(
  options: Options<CreateSnapshotData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateSnapshotResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    responseTransformer: createSnapshotResponseTransformer,
    url: '/snapshots',
  });
};

/**
 * Returns a snapshot in the system for a character
 */
export const getSnapshot = <ThrowOnError extends boolean = false>(
  options: Options<GetSnapshotData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSnapshotResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    responseTransformer: getSnapshotResponseTransformer,
    url: '/snapshots/{snapshotId}',
  });
};

export const getActivities = <ThrowOnError extends boolean = false>(
  options: Options<GetActivitiesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetActivitiesResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    responseTransformer: getActivitiesResponseTransformer,
    url: '/activities',
  });
};

export const getActivity = <ThrowOnError extends boolean = false>(
  options: Options<GetActivityData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetActivityResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    responseTransformer: getActivityResponseTransformer,
    url: '/activities/{activityId}',
  });
};

export const getSessions = <ThrowOnError extends boolean = false>(
  options: Options<GetSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSessionsResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    responseTransformer: getSessionsResponseTransformer,
    url: '/sessions',
  });
};

/**
 * Create a new session
 */
export const startSession = <ThrowOnError extends boolean = false>(
  options: Options<StartSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    StartSessionResponse,
    StartSessionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    responseTransformer: startSessionResponseTransformer,
    url: '/sessions',
  });
};

/**
 * Get a specific session
 */
export const getSession = <ThrowOnError extends boolean = false>(
  options: Options<GetSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSessionResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    responseTransformer: getSessionResponseTransformer,
    url: '/sessions/{sessionId}',
  });
};

/**
 * Complete a session
 */
export const updateSession = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateSessionResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    responseTransformer: updateSessionResponseTransformer,
    url: '/sessions/{sessionId}',
  });
};

export const getSessionAggregates = <ThrowOnError extends boolean = false>(
  options: Options<GetSessionAggregatesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSessionAggregatesResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    responseTransformer: getSessionAggregatesResponseTransformer,
    url: '/sessions/{sessionId}/aggregates',
  });
};

export const getPublicSessions = <ThrowOnError extends boolean = false>(
  options: Options<GetPublicSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPublicSessionsResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    responseTransformer: getPublicSessionsResponseTransformer,
    url: '/public/sessions',
  });
};

/**
 * Get a specific session
 */
export const getPublicSession = <ThrowOnError extends boolean = false>(
  options: Options<GetPublicSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPublicSessionResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    responseTransformer: getPublicSessionResponseTransformer,
    url: '/public/sessions/{sessionId}',
  });
};

export const getPublicSessionAggregates = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetPublicSessionAggregatesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPublicSessionAggregatesResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    responseTransformer: getPublicSessionAggregatesResponseTransformer,
    url: '/public/sessions/{sessionId}/aggregates',
  });
};

export const getPublicProfile = <ThrowOnError extends boolean = false>(
  options: Options<GetPublicProfileData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPublicProfileResponse,
    GetPublicProfileError,
    ThrowOnError
  >({
    ...options,
    url: '/public/profile',
  });
};

/**
 * Perform session update logic
 */
export const sessionCheckIn = <ThrowOnError extends boolean = false>(
  options: Options<SessionCheckInData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    SessionCheckInResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/actions/session-checkin',
  });
};
